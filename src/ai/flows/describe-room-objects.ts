
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Describes objects present in a room based on uploaded photos,
 *               counting occurrences of distinct items.
 *
 * - describeRoomObjects - A function that takes room photos and returns a list of object names with counts.
 * - DescribeRoomObjectsInput - The input type for the describeRoomObjects function.
 * - DescribeRoomObjectsOutput - The return type for the describeRoomObjects function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DescribeRoomObjectsInputSchema = z.object({
  photoDataUris: z
    .array(z.string())
    .describe(
      'An array of photo URLs of a room. These URLs should be publicly accessible or signed URLs that the AI model can retrieve.'
    ),
});
export type DescribeRoomObjectsInput = z.infer<typeof DescribeRoomObjectsInputSchema>;

const DescribeRoomObjectsOutputSchema = z.object({
  objects: z
    .array(
      z.object({
        name: z.string().describe('The name of the distinct object type identified.'),
        count: z.number().int().min(1).describe('The number of times this specific object type appears in the images (must be at least 1).'),
      })
    )
    .describe('A list of distinct objects, each with its name and count.'),
});
export type DescribeRoomObjectsOutput = z.infer<typeof DescribeRoomObjectsOutputSchema>;

export async function describeRoomObjects(
  input: DescribeRoomObjectsInput
): Promise<DescribeRoomObjectsOutput> {
  return describeRoomObjectsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'describeRoomObjectsPrompt',
  input: {schema: DescribeRoomObjectsInputSchema},
  output: {schema: DescribeRoomObjectsOutputSchema},
  prompt: `You are an expert visual inspector AI specializing in meticulously identifying and listing objects visible in images of rooms, and COUNTING distinct items.
Your task is to analyze the provided images of a room with extreme attention to detail.

CRITICAL INSTRUCTIONS FOR OBJECT IDENTIFICATION AND COUNTING:

1.  **DISTINCT OBJECT TYPES AND COUNTS:** Your primary goal is to identify *distinct types* of objects. For each distinct type, you must provide its name and the *total count* of how many instances of that specific object type are visible across all provided images. The count must be at least 1.
    *   Example: If there are six identical white ceramic plates, your output for this item should be: { "name": "white ceramic plate", "count": 6 }.
    *   Example: If there is one red chair and two blue chairs, your output should include two separate entries: { "name": "red chair", "count": 1 } and { "name": "blue chair", "count": 2 }.

2.  **SPECIFICITY IN NAMING:** Be as specific as possible with the object name.
    *   If an item's specific name, character, title, or unique identifier (like a specific model of a car or brand of a tool) is legible or clearly visually identifiable from its features, you MUST use that specific identifier in its name.
        *   Example: "Batman Funko Pop figure", "The Great Gatsby book".
    *   If the specific name is not clear, use a descriptive name based on its category and visual characteristics.
        *   Example: "blue coffee mug", "red Funko Pop figure holding sword", "unidentified Funko Pop figure with blue hat".

3.  **NO INDIVIDUAL LISTING OF IDENTICAL ITEMS:** Do NOT list identical items as separate entries if they are of the same distinct type. Instead, provide the single name for that type and its total count.
    *   INCORRECT: Listing "Funko Pop figure", "Funko Pop figure", "Funko Pop figure"...
    *   CORRECT (if N are truly identical and unidentifiable): { "name": "unidentified Funko Pop figure", "count": N }
    *   CORRECT (if identifiable): { "name": "Batman Funko Pop figure", "count": M } (where M is the count of Batman Funko Pops specifically).

4.  **DIFFERENTIATION FOR SIMILAR BUT DISTINCT ITEMS:** If items are of the same general category (e.g., "Funko Pop figure") but are visually distinct (e.g., different characters, colors, poses), they should be listed as *separate distinct object types* with their respective counts (usually the count will be 1 for such unique variants, unless there are multiples of that *specific* distinct variant).
    *   Example Output Array Snippet:
        [
          { "name": "Batman Funko Pop figure", "count": 1 },
          { "name": "Superman Funko Pop figure", "count": 1 },
          { "name": "red Funko Pop figure holding sword", "count": 1 }
        ]

5.  **BE EXHAUSTIVE FOR DISTINCT TYPES:** Ensure every distinct type of object and its count is included.

6.  **STRICT EXCLUSIONS:** You MUST EXCLUDE common structural elements and their components from your list. Focus only on movable objects, furniture, decorations, and personal belongings within the room.
    *   **DO NOT INCLUDE:** 'WALL', 'FLOOR', 'CEILING', 'WINDOW', 'DOOR', or 'CABINETS' as items.
    *   **ALSO EXCLUDE THEIR PARTS:** This exclusion also applies to all parts of these structures, such as 'door knobs', 'hinges', 'window frames', 'light switches', 'power outlets', 'baseboards', or 'cabinet handles'.

Your output MUST be a JSON object structured exactly like this: { "objects": [ { "name": "object_name_1", "count": N1 }, { "name": "object_name_2", "count": N2 }, ... ] }.
Do not provide any other information or formatting.

{{#each photoDataUris}}
Photo {{@index}}:
{{media url=this}}
{{/each}}`,
});

const describeRoomObjectsFlow = ai.defineFlow(
  {name: 'describeRoomObjectsFlow', inputSchema: DescribeRoomObjectsInputSchema, outputSchema: DescribeRoomObjectsOutputSchema},
  async input => {
    const {output} = await prompt(input);
    if (!output || !output.objects) {
      // Handle cases where output might be null or missing objects, though schema should enforce
      return { objects: [] };
    }
    return output;
  }
);




